<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if ( forecasts == null )
{
      <p><em>Loading...</em></p>
}
else
{
      <table class='table'>
            <thead>
                  <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                  </tr>
            </thead>
            <tbody>
                  @foreach ( var forecast in forecasts )
                  {
                        <tr @key( forecast )>
                              <td>@forecast.DateFormatted</td>
                              <td>@forecast.TemperatureC</td>
                              <td>@forecast.TemperatureF</td>
                              <td>@forecast.Summary</td>
                        </tr>
                  }
            </tbody>
      </table>
}

@functions {
WeatherForecast2[] forecasts;
WeatherForecast[] forecasts2;

override protected async Task InitAsync ( )
{
      using ( var client = new HttpClient( ) )
      {
            var json = await client.GetStringAsync("/sample-data/weather.json");
            var json22 = await client.GetStringAsync(AbsoluteUrl("/api/SampleData/WeatherForecasts"));
            forecasts = JsonUtil.Deserialize<WeatherForecast2[ ]>( json );
      }
}

class WeatherForecast2
{
      public string DateFormatted { get; set; }
      public int TemperatureC { get; set; }
      public string Summary { get; set; }

      [Newtonsoft.Json.JsonIgnore]
      public int TemperatureF
      {
            get
            {
                  return 32 + ( int ) ( TemperatureC / 0.5556 );
            }
      }
}
}